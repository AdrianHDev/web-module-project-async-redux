{"version":3,"sources":["reportWebVitals.js","actions/index.js","components/Trivia.js","App.js","reducers/index.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","FETCH_TRIVIA_START","FETCH_TRIVIA_SUCCESS","FETCH_TRIVIA_FAIL","TRIVIA_ANSWERED","up","Error","getTrivia","dispatch","console","log","type","axios","get","res","data","response","response_code","payload","results","catch","err","message","shuffledAnswers","stringToColour","str","hash","i","length","charCodeAt","colour","toString","substr","connect","state","triviaQuestion","correct","onFetchTrivia","onTriviaAnswered","setTimeout","triviaAnsweredWith","props","answerList","incorrect_answers","correct_answer","JSON","stringify","sort","randomIndex","currentIndex","Math","floor","random","shuffleAnswers","useEffect","verifyAnswer","ev","preventDefault","target","value","Card","border","text","bg","style","maxHeight","maxWidth","Body","Title","color","atob","question","map","answer","Button","onClick","block","background","hex2rgb","yiq","transition","size","variant","Footer","App","display","alignItems","justifyContent","width","height","className","initialState","category","difficulty","error","isFetching","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db0cdc0b.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nexport const FETCH_TRIVIA_START = \"FETCH_TRIVIA_START\";\r\nexport const FETCH_TRIVIA_SUCCESS = \"FETCH_TRIVIA_SUCCESS\";\r\nexport const FETCH_TRIVIA_FAIL = \"FETCH_TRIVIA_FAIL\";\r\n\r\nexport const TRIVIA_ANSWERED = \"TRIVIA_ANSWERED\";\r\n\r\nconst up = new Error(\"Failed with unknown response code...\");\r\n\r\nexport const getTrivia = () => (dispatch) => {\r\n  console.log(\"in dispatch!\");\r\n  dispatch({ type: FETCH_TRIVIA_START });\r\n  axios\r\n    .get(\"https://opentdb.com/api.php?amount=1&encode=base64&category=15\") /* Category is set here. 15 is Video Game trivia. */\r\n    .then((res) => {\r\n      console.log(res.data.response);\r\n      switch (res.data.response_code) {\r\n        case 0:\r\n          dispatch({\r\n            type: FETCH_TRIVIA_SUCCESS,\r\n            payload: res.data.results[0],\r\n          });\r\n          break;\r\n        /* this sucks but I wanted more verbally clear error messages than just the status code the API provides. */\r\n        case 1:\r\n          dispatch({\r\n            type: FETCH_TRIVIA_FAIL,\r\n            payload: \"Not enough questions for your query.\",\r\n          });\r\n          break;\r\n        case 2:\r\n          dispatch({\r\n            type: FETCH_TRIVIA_FAIL,\r\n            payload: \"Query has invalid paramter.\",\r\n          });\r\n          break;\r\n        case 3:\r\n          dispatch({\r\n            type: FETCH_TRIVIA_FAIL,\r\n            payload: \"Session Token Not Found. (Possibly expired?)\",\r\n          });\r\n          break;\r\n        case 4:\r\n          dispatch({\r\n            type: FETCH_TRIVIA_FAIL,\r\n            payload:\r\n              \"Session Token has returned all possible questions for the specified query.\",\r\n          });\r\n          break;\r\n        default:\r\n          throw up; // I just thought it was funny... ðŸ™ƒ\r\n      }\r\n    })\r\n    .catch((err) =>\r\n      dispatch({ type: FETCH_TRIVIA_FAIL, payload: err.message })\r\n    );\r\n};\r\n\r\nexport const triviaAnsweredWith = (correct) => (dispatch) => {\r\n  dispatch({ type: TRIVIA_ANSWERED, payload: correct });\r\n  setTimeout(() => {\r\n    dispatch(getTrivia());\r\n  }, 3000);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { getTrivia, triviaAnsweredWith } from \"../actions\";\r\nimport hex2rgb from 'hex2rgb'\r\nlet shuffledAnswers = [];\r\n\r\nconst stringToColour = (str) => {\r\n  let hash = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n  }\r\n  let colour = \"#\";\r\n  for (let i = 0; i < 3; i++) {\r\n    var value = (hash >> (i * 8)) & 0xff;\r\n    colour += (\"00\" + value.toString(16)).substr(-2);\r\n  }\r\n  return colour;\r\n};\r\n\r\n\r\nconst Trivia = (props) => {\r\n  console.log(props);\r\n  const shuffleAnswers = () => {\r\n    const answerList = [\r\n      ...props.triviaQuestion.incorrect_answers,\r\n      props.triviaQuestion.correct_answer,\r\n    ];\r\n\r\n    if (\r\n      JSON.stringify(shuffledAnswers.sort()) !==\r\n      JSON.stringify(answerList.sort())\r\n    ) {\r\n      var currentIndex = answerList.length,\r\n        randomIndex;\r\n\r\n      // While there remain elements to shuffle...\r\n      while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [answerList[currentIndex], answerList[randomIndex]] = [\r\n          answerList[randomIndex],\r\n          answerList[currentIndex],\r\n        ];\r\n      }\r\n\r\n      return answerList;\r\n    } else return shuffledAnswers;\r\n  };\r\n  shuffledAnswers = shuffleAnswers();\r\n\r\n  useEffect(() => {\r\n    props.onFetchTrivia();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const verifyAnswer = (ev) => {\r\n    ev.preventDefault();\r\n    console.log(ev.target.value, props.triviaQuestion.correct_answer);\r\n    if (props.correct === null) {\r\n      if (ev.target.value === props.triviaQuestion.correct_answer) {\r\n        props.onTriviaAnswered(true);\r\n      } else {\r\n        props.onTriviaAnswered(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      border=\"dark\"\r\n      text=\"white\"\r\n      bg=\"dark\"\r\n      style={{\r\n        maxHeight: \"50vh\",\r\n        maxWidth: \"50vw\",\r\n      }}\r\n    >\r\n      <Card.Body>\r\n        <Card.Title\r\n          style={{\r\n            color: (() => {\r\n              return (props.correct !== null ? (props.correct) ? '#32de84' : 'red' : 'white')\r\n            })(),\r\n          }}\r\n        >\r\n          {atob(props.triviaQuestion.question)}\r\n        </Card.Title>\r\n        {shuffledAnswers.map((answer) => {\r\n          return (\r\n            <Button\r\n              onClick={verifyAnswer}\r\n              block\r\n              style={{\r\n                background: stringToColour(atob(answer)),\r\n                color: hex2rgb(stringToColour(atob(answer))).yiq,\r\n                transition: '0'\r\n              }}\r\n              value={answer}\r\n              size=\"lg\"\r\n              variant=\"primary\"\r\n            >\r\n              {atob(answer)}\r\n            </Button>\r\n          );\r\n        })}\r\n        <br />\r\n        <Card.Footer>\r\n          <strong>\r\n            {(() => {\r\n              if (props.correct !== null) {\r\n                return props.correct ? \"Correct!\" : \"Incorrect!\";\r\n              } else return null;\r\n            })()}\r\n          </strong>\r\n        </Card.Footer>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    triviaQuestion: state.triviaQuestion,\r\n    correct: state.correct,\r\n  };\r\n};\r\n\r\nconst mapDispatchProps = (dispatch) => {\r\n  return {\r\n    onFetchTrivia: () => {\r\n      dispatch(getTrivia());\r\n    },\r\n    onTriviaAnswered: (correct) => {\r\n      dispatch(triviaAnsweredWith(correct));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchProps)(Trivia);\r\n","import \"./App.css\";\nimport Trivia from \"./components/Trivia\";\n\nfunction App() {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100vw\",\n        height: \"100vh\",\n        background: \"#9C42B8\",\n      }}\n      className=\"App\"\n    >\n      <Trivia />\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  FETCH_TRIVIA_START,\r\n  FETCH_TRIVIA_FAIL,\r\n  FETCH_TRIVIA_SUCCESS,\r\n  TRIVIA_ANSWERED,\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  //#region\r\n  triviaQuestion: {\r\n    category: \"RW50ZXJ0YWlubWVudDogVmlkZW8gR2FtZXM=\",\r\n    type: \"bXVsdGlwbGU=\",\r\n    difficulty: \"bWVkaXVt\",\r\n    question:\r\n      \"V2hhdCB3YXMgdGhlIGNoYXJhY3RlciBLaXJieSBvcmlnaW5hbGx5IGdvaW5nIHRvIGJlIG5hbWVkPw==\",\r\n    correct_answer: \"UG9wb3Bv\",\r\n    incorrect_answers: [\"RGVkZWRl\", \"V2FkZGxlIERlZQ==\", \"UHJpbmNlIFB1ZmY=\"],\r\n  },\r\n  //#endregion\r\n  error: \"\",\r\n  isFetching: false,\r\n  correct: null,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  console.log(\"reducer @\", action);\r\n  switch (action.type) {\r\n    case FETCH_TRIVIA_START:\r\n      return {\r\n        ...state,\r\n        isFetching: true,\r\n        error: \"\",\r\n      };\r\n    case FETCH_TRIVIA_SUCCESS:\r\n      return {\r\n        ...state,\r\n        correct: null,\r\n        isFetching: false,\r\n        triviaQuestion: action.payload,\r\n      };\r\n    case FETCH_TRIVIA_FAIL:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case TRIVIA_ANSWERED:\r\n      console.log(\"TRIVIA ANSWERED!\");\r\n      return {\r\n        ...state,\r\n        correct: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer from \"./reducers\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}